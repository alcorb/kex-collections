buildscript {
    ext.kotlin_version = '1.2.60'
    ext.junit_version = '4.12'

    repositories {
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url 'https://maven.google.com' }
        google()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.android.tools.build:gradle:3.1.4'
    }
}

allprojects {
    repositories {
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url 'https://maven.google.com' }
        google()
    }
}

configurations {
    ktlint
}

ext {
    // Jetpack
    lifecycleVersion = '1.1.1'

    // Images
    glideVersion = '4.7.1'

    // Rx
    rxandroidVersion = '2.1.0'
    rxjavaVersion = '2.2.1'
    rxkotlinVersion = '2.2.0'

    // Network
    okhttpVersion = '3.11.0'
    retrofitVersion = '2.4.0'
    gsonVersion = '2.5'
}

//apply plugin: 'java-library'
//apply plugin: 'kotlin'
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    lintOptions {
        abortOnError true
        ignoreWarnings false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Core
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // Lint
    ktlint "com.github.shyiko:ktlint:0.28.0"

    // Tests
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    // Support
    api 'com.android.support:appcompat-v7:28.0.0-rc02'

    // Jetpack
    api "android.arch.lifecycle:extensions:$lifecycleVersion"
    kapt "android.arch.lifecycle:compiler:$lifecycleVersion"

    // Images
    api "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    // Rx
    api "io.reactivex.rxjava2:rxandroid:${rxandroidVersion}"
    api "io.reactivex.rxjava2:rxjava:${rxjavaVersion}"
    api "io.reactivex.rxjava2:rxkotlin:${rxkotlinVersion}"

    // Network
    api "com.squareup.okhttp3:okhttp:$okhttpVersion"
    api "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"
    api "com.squareup.retrofit2:retrofit:$retrofitVersion"
    api "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    api "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    api "com.google.code.gson:gson:$gsonVersion"
}

def inputFiles = project.fileTree(dir: "src", include: "**/*.kt")
def outputDir = "${project.buildDir}/reports/ktlint/"
def outputFile = "${outputDir}ktlint-checkstyle-report.xml"

task ktlint(type: JavaExec, group: "verification") {
    inputs.files(inputFiles)
    outputs.dir(outputDir)
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args = [
//            "--reporter=plain",
//            "--reporter=checkstyle,output=${outputFile}",
            "src/**/*.kt"
    ]
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}